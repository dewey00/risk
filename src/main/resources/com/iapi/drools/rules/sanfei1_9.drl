package com.iapi.drools.rules;
import java.util.Map;
import com.iapi.drools.dao.IElasticSearchDao
import java.util.concurrent.CompletableFuture
import java.util.List;

// 调用接口查询指标
global IElasticSearchDao elasticSearchDao;

dialect  "mvel"


// 查询api,补充指标
// 使用API 后缀名
//rule "DNYXN_1_API"
//// 权重确保先执行这个规则文件
//    salience 999
//    // 这个方法只在进入时执行一次就行
//    no-loop true
//    when
//        //让这个条件触发执行下面的规则
//        $map: Map()
//    then
        // 下面是java代码脚本，即执行指标项查询计算的部分
        // 1、使用面向对象查询 结果是map的
//        org.elasticsearch.index.query.QueryBuilder queryBuilder = org.elasticsearch.index.query.QueryBuilders.boolQuery().must(org.elasticsearch.index.query.QueryBuilders.matchPhraseQuery("",""));
//        Map completableFuture = elasticSearchDao.getFirstResultMap(queryBuilder,"查询的索引，es的数据库名称");
//
//            try{
//
//              String value = String.valueOf(result.get("查询的字段"));
//            }catch (Exception e){
//                e.printStackTrace();
//            }
//
//
        // 2、使用面向对象查询 结果是List的
//        org.elasticsearch.index.query.QueryBuilder queryBuilder = org.elasticsearch.index.query.QueryBuilders.boolQuery().must(org.elasticsearch.index.query.QueryBuilders.matchPhraseQuery("",""));
//               List<Map> completableFuture = elasticSearchDao.getListResultsByQueryBuilder(queryBuilder,"查询的索引，es的数据库名称");
//
//                    try{
//                      List<Map> result =   completableFuture.get();
//                       // 处理result 获得指标项的值，并添加到 $map 中
//                        // $map.put("指标项字段","处理结果");
//                    }catch (Exception e){
//                        e.printStackTrace();
//                    }
//
//
//      // 3、使用json查询,返回map对象的
//         Map completableFuture =elasticSearchDao.getFirstResultMapByJson("json查询es的字符串","es索引");
//        4、使用json查询,返回 List 对象的
//           List<Map> completableFuture = elasticSearchDao.getListResultsByJson("json查询es的字符串","es索引");
//        $map.put("指标项字段",value);
// 将更新后的对象加载到内存
//        update($map)
//end




// 东南亚新娘

rule "DNYXN_1_ENTER"
    salience 10
//    agenda-group "enter_rule"
//    auto-focus true

    when
        /*  {C1} AND {C2} AND {C3} AND {C4}
        */
        $map: Map(
         // C1 国籍等于IDN、VNM
            $map.get("GJ")(==  "IDN" || == "VNM")
            // C2 出生日期范围19800101-20001231
          ,toInt($map.get("CSRQ")) (>19800101 && <20001231)
           // C3 性别等于2
           && $map.get("XB")=="2"
           // C4 签证种类属于K,H
           && ($map.get("QZZL").substring(0,1)(==  "K" || == "H"))
        )
    then
        drools.setFocus("dnyxn_danger");
       // System.out.println(" 请李志维确认一下 C4  字段和值");
        System.out.println(" 进入规则触发  东南亚新娘");

end

// 印尼新娘

rule "DNYXN_1_YNXN"
    salience 1
    agenda-group "dnyxn_danger"
    when
        /*  {C1} AND {C2} AND {C3} AND {C4}
        */
        eval(true)
//        $map: Map(
//          // C1 国籍等于IDN、VNM
           //            $map.get("country")(==  "IDN" || == "VNM")
           //            // C2 出生日期范围19800101-20001231
           //          ,toInt($map.get("birthday")) (>19800101 && <20001231)
           //           // C3 性别等于2
           //           && $map.get("gender")=="2"
           //           // C4 签证种类属于K,H
           //           && ($map.get("visa_type")( =="K"|| =="H"))
//        )
    then
        System.out.println(" 预警规则触发 由于和进入规则相同，自动触发 印尼新娘");
end

















